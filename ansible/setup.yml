---
  - name: Configure server
    hosts: py4class

    vars:
      packages:
        - python3-pip
        - nginx
        - python3-dev
        - redis-server
        - redis-tools
        - git-all
      base_directory: /var/app
      install_directory: /var/app/py4class
      log_directory: /var/app/py4class/logs
      runtime_user: www-data
      py4_gunicorn_sock: /run/py4class/socket
      py4_gunicorn_port: 9000
      rest_gunicorn_sock: /run/py4rest/socket
      rest_gunicorn_port: 9090
      py4_listen_port: "80"
      rest_listen_port: "8080"

    tasks:
      - name: setup {{ runtime_user }} user
        user: name={{ runtime_user }} state=present

      - name: install needed packages
        apt: name={{ packages }} state=latest

      - name: upload python package requirements
        copy: src=requirements.txt dest=/tmp/requirements.txt

      - name: install python packages
        pip: requirements=/tmp/requirements.txt state=latest

      - name: create base directory
        file: path={{ base_directory }} state=directory owner={{ runtime_user }}

      - name: create runtime tmp directories
        file: path={{ item }} state=directory owner={{ runtime_user }}
        with_items:
          - /run/py4class
          - /run/py4rest

      - name: create deployment directories
        file: path={{ install_directory }} state=directory owner={{ runtime_user }}

      - name: clone the repo
        git: repo=git://github.com/jeremyprice/RU_Python_IV_API.git
             dest={{ install_directory }}
        become: yes
        become_user: "{{ runtime_user }}"
        notify:
          - restart redis
          - restart py4
          - restart rest

      - name: create log directory
        file: path={{ log_directory }} state=directory owner={{ runtime_user }}

      - name: install the py4 system files
        template: src={{ item.src }} dest={{ item.dest }}
        notify:
          - reload systemd
          - restart redis
          - restart py4
        with_items:
          - { src: "py4.systemd.service.j2", dest: "/lib/systemd/system/py4class.service" }
          - { src: "py4.systemd.socket.j2", dest: "/lib/systemd/system/py4class.socket" }
          - { src: "py4.tmpfiles.d.conf.j2", dest: "/usr/lib/tmpfiles.d/py4class.conf" }

      - name: install the rest system files
        template: src={{ item.src }} dest={{ item.dest }}
        notify:
          - reload systemd
          - restart redis
          - restart rest
        with_items:
          - { src: "rest.systemd.service.j2", dest: "/lib/systemd/system/py4rest.service" }
          - { src: "rest.systemd.socket.j2", dest: "/lib/systemd/system/py4rest.socket" }
          - { src: "rest.tmpfiles.d.conf.j2", dest: "/usr/lib/tmpfiles.d/py4rest.conf" }

      - name: install the nginx config file
        template: src=nginx.j2 dest=/etc/nginx/sites-available/py4class
        notify: restart nginx

      - name: enable the py4class site config in nginx
        file: src=/etc/nginx/sites-available/py4class
              path=/etc/nginx/sites-enabled/py4class state=link
        notify: restart nginx

      - name: disable the default nginx site config
        file: path=/etc/nginx/sites-enabled/default state=absent
        notify: restart nginx

      - name: make sure we don't close OpenSSH ports in the firewall
        ufw: rule=limit state=enabled name=OpenSSH

      - name: make sure we don't close ssh ports in the firewall
        ufw: rule=limit state=enabled port=ssh

      - name: poke a hole in the firewall for the nginx server
        ufw: proto=tcp rule=allow state=enabled to_port={{ item }}
        with_items:
          - "80"
          - "8080"

      - name: ensure nginx, redis, and app are started and boot enabled
        service: name={{ item }} state=started enabled=yes
        with_items:
          - nginx
          - py4class
          - py4rest
          - redis-server

    handlers:
      - name: reload systemd
        command: systemctl daemon-reload

      - name: restart redis
        service: name=redis state=restarted

      - name: restart py4
        service: name=py4class state=restarted

      - name: restart rest
        service: name=py4rest state=restarted

      - name: restart nginx
        service: name=nginx state=restarted
